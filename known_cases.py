
# These cases were randomly selected until we had at least 10 occurance of each category

from pathlib import Path


CASES_METAL = [ 
    ('54048455572640700000000', 45.6355138555, -72.9745786615),
    ('10043296883807100000000', 48.4494894469, -68.5127162939),
    ('58227073982579500000000', 45.4936318023, -73.4610340764),
    ('34058246899014700000000', 46.6493469775, -71.9309472252),
    ('89015833593242000000000', 48.1453381026, -78.1244255709),
    ('33025484104593000000000', 46.4101848905, -71.2380200079),
    ('69037669900692000000000', 45.1300969207, -73.9923725976),
    ('95045090144870000000000', 48.7419994651, -69.0766029865),
    ('50072732178460300000000', 46.2325346155, -72.6059969209),
    ('87085151023940500000000', 48.831022438, -79.3570426474),
    ('61005089606154000000000', 46.0095700952, -73.458477163),
    ('88010319316812400000000', 48.6767691955, -77.4997516121),
    ('53052359949975700000000', 46.0387197823, -73.1034430776),
    ('55030352882154900000000', 45.393354149529955, -73.10399394600796),
    ('68030120548024500000000', 45.1925312534907, -73.40325101716974),
    ('66023004336949240000000', 45.53253891648251, -73.5552185616558),
]

CASES_NO_BLDG = [
    ('43027903850908500000000', 45.4733625015, -71.9611995336),
    ('50072702332683800000000', 46.245750057, -72.6496882626),
    ('71060692745079100000000', 45.3873638732, -73.9519715895),
    ('25213568142937000000000', 46.7693671303, -71.1327809408),
    ('23027398954506610000000', 46.8415546697, -71.3554197976),
    ('94068536341710600000000', 48.4067570656, -71.1927463443),
    ('25213466956601800000000', 46.6663123081, -71.2653004833),
    ('75040598086124900000000', 45.8646394116, -74.0793338718),
    ('62060502940653300000000', 46.298818867, -74.2053249307),
    ('71133453785486100000000', 45.4754897154, -74.2540046434),
    ('31135531589530000000000', 46.1810255731, -71.1597031996),
    ('82020614217223300000000', 45.5222230086, -75.7788526299),
    ('85052246758032200000000', 47.5509451015, -79.2382017398),
    ('22005129241831700000000', 46.8621683944, -71.7108198827),
    ('96010976456926300000000', 49.3199531444, -67.5993107223),
    ('23027399072965110000000', 46.8485884174, -71.3523700861),
    ('23027419390035110000000', 46.8740162402, -71.3252163498),
    ('25213427609215900000000', 46.729279116, -71.3214167544),
    ('49058838146050900000000', 45.8697465826, -72.4877731007),
    ('64015946805129000000000', 45.7570894573, -73.6386761607),
    ('71060692890376300000000', 45.3916360683, -73.9452190515),
    ('73025835758073700000000', 45.6600222332, -73.7735268366),
    ('87058300181352500000000', 48.7480064379, -79.1459309591),
    ('76043306456597900000000', 45.7191340841, -74.4547770123),
    ('11045033032801600000000', 48.1031628913, -69.1762860123),
    ('49058848173761900000000', 45.8670595943, -72.469903352),
    ('38010762850273800000000', 46.2882759823, -72.5690929784),
    ('67050862667936500000000', 45.3806593591, -73.7312962938),

]

CASES_NOT_METAL = [
    ('23027397812711910000000', 46.7400288224, -71.3592400148),
    ('73015756070720909430000', 45.6792284034, -73.8726194369),
    ('45072081534785700000000', 45.2714403836, -72.17995924),
    ('05070053443225500000000', 48.1402816726, -65.8354629025),
    ('81017673750169800000000', 45.4709328042, -75.6981231358),
    ('56005339421668100000000', 45.0862463461, -73.1387463729),
    ('37067733320761300000000', 46.3334794074, -72.6106818416),
    ('54105496549413400000000', 45.7318166066, -72.9265615032),
    ('64008006245768200000000', 45.7029000837, -73.5554816051),
    ('70052561763435500000000', 45.2945055404, -74.1139574581),
    ('85065655022696400000000', 47.3904890201, -78.6991383409),
    ('05032482045656600000000', 48.0215346086, -65.2552964505),
    ('66023954270197570000000', 45.5185421712, -73.6162489445),
    ('26015723701056000000000', 46.3718814526, -70.9232464999),
    ('58227064363909600000000', 45.5304868726, -73.4757987837),
    ('23027399037796110000000', 46.8531968775, -71.3578887166),
    ('81017663770087700000000', 45.4708817207, -75.7082270304),
    ('23027428688579010000000', 46.8186675134, -71.3117518225),
    ('66023984498949830000000', 45.5439761771, -73.5741728362),
    ('25213497281196100000000', 46.6868401675, -71.2186300936),
    ('94068626476984100000000', 48.421024091, -71.0669169942),
    ('60013076800550200000000', 45.7518781867, -73.4710147166),
    ('64008986281871400000000', 45.6988804361, -73.5759284482),
    ('66023774073996800000000', 45.5027193312, -73.8457974027),
    ('67010052231674600000000', 45.3390309229, -73.4927491624),
    ('49058858502686000000000', 45.9023303481, -72.4655427088),
    ('73015755939127900000000', 45.6790663867, -73.8785026623),
    ('74005675328723100000000', 45.6233729643, -73.9812500349),
    ('74005706321680100000000', 45.7069289279, -73.9435043798),
    ('74005675480416600000000', 45.6255802954, -73.9740012127),
    ('73015815658465500000000', 45.6511684626, -73.7982856862),
    ('66023884330821170000000', 45.5268221925, -73.7103010726),
]

ALL_CASES = CASES_METAL + CASES_NOT_METAL + CASES_NO_BLDG

CASES_SET_NO_BLDG = set([case[0] for case in CASES_NO_BLDG])
CASES_SET_METAL = set([case[0] for case in CASES_METAL])
CASES_SET_NOT_METAL = set([case[0] for case in CASES_NOT_METAL])
CASES_SET_BLDG = set([case[0] for case in CASES_METAL + CASES_NOT_METAL])


def get_category(case):

    if case in CASES_SET_NO_BLDG:
        return "no_bldg"

    if case in CASES_SET_METAL:
        return "metal"

    if case in CASES_SET_NOT_METAL:
        return "not_metal"
    

# Used to create the training set in the hierarchy expected by BRAILS from the original set
if __name__ == '__main__':
    import random
    import shutil

    DATADIR = Path("C:/Users/lhv/VSCode/svautoscreenshots/metal_bldgs")
    OUTPUTDIR = Path("C:/Users/lhv/VSCode/svautoscreen_models/buildings_dataset")

    for p in ["no_bldg", "metal", "not_metal"]:
        (OUTPUTDIR / "train" / p).mkdir(exist_ok=True, parents=True)
        (OUTPUTDIR / "val" / p).mkdir(exist_ok=True, parents=True)

    for case in ALL_CASES:
        id = case[0]

        p = Path(f"{DATADIR}/{id}")

        if not p.exists():
            print(f"Could not find {p} - skipping")
            continue

        category = get_category(id)

        all_imgs = list(p.iterdir())
        # Take about 80% for training, 20% for eval
        num_train = (
            len(all_imgs) // 5 * 4
        ) - 1  

        random.shuffle(all_imgs)
        for i, img in enumerate(all_imgs):
            if i > num_train:
                dst = "val"
            else:
                dst = "train"

            print(f"{OUTPUTDIR}/{dst}/{category}")
            shutil.copy2(img, f"{OUTPUTDIR}/{dst}/{category}")
